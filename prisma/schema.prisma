// PostgreSQL (Neon)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int               @id @default(autoincrement())
  telegramId  String            @unique
  username    String?
  name        String?
  coins       Int               @default(0)
  isAdmin     Boolean           @default(false)
  createdAt   DateTime          @default(now())

  purchases   Purchase[]

  // Relations to CoinTransaction
  coinTxns        CoinTransaction[] @relation("UserCoinTxns")   // transactions where this user is the recipient
  adminCoinTxns   CoinTransaction[] @relation("AdminCoinTxns")  // transactions performed by this user as admin
}

model Video {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  url         String
  thumbUrl    String?
  category    String?
  tags        String[]   @default([])
  isFree      Boolean    @default(false)
  price       Int        @default(0)
  createdAt   DateTime   @default(now())

  purchases   Purchase[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  videoId   Int
  price     Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model CoinTransaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  adminId   Int?
  delta     Int
  reason    String?
  createdAt DateTime @default(now())

  // Recipient user (required)
  user   User  @relation("UserCoinTxns",  fields: [userId],  references: [id])

  // Admin who performed the change (optional)
  admin  User? @relation("AdminCoinTxns", fields: [adminId], references: [id])

  @@index([userId, createdAt])
}
